Okay so this problem seems quite simple in theory. You have to get the product of all the array except that position.
So, given [1,2,3,4]. Output [24,12,8,6]. Output[0] = 2*3*4
You are not allowed to use division because you could just multiply the whole array and then divide by position.
Also you need to be in linear O(n) time. 

Here is the breakdown. We are going to arrange the result array to include a "pre" and "post" fix.
The best way that I can describe this is a comment i founf under the video
prefix:
| 1 | a | a * b | a * b * c |

postfix:
|b * c * d |  c * d | d | 1 |

result = pre * post: 
|b * c * d| a * c * d| a * b * d| a * b * c|

It is editing and "fixing" the positions by multiplying what is needed. It does this by using 1 and then the
starts and ends being oppisites and starting at. Like basically skipping a step leaving a 1 and moving the
multiplication to the other fix. So 1, a, ab , abc and then bcd,cd,d,1. When you multiply those you get what
you need because it was already there from the other fix. Im not sure how it perfectly lines up everytime, but
that is the principle of it. 

At this point I dont really want to explain the rest of the code but we are basically editing the result array
with our pre and then post fix. We start both with one because we do not want to multiply a position by itself 
in the nums array.

1. Make result array of 1's based on nums array.
2. Set prefix to 1
3. Make a loop over the range of the length of the nums array to use.
4. Set result of position i to the prefix value AKA 1 (at the start)
5. Update the prefix value by multiplying by the nums array of i position (The result is updated first and then the 
prefix is changed for the next iteration.
6. Do the same thing for the postfix but start at the end.
7. Be happy you figured out a problem that is too complicated for its own good. 

class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        res = [1] * len(nums)
        prefix = 1
        for i in range(len(nums)):
            res[i] = prefix
            prefix *= nums[i]
        postfix = 1
        for i in range(len(nums)-1,-1,-1):
            res[i] *= postfix
            postfix *= nums[i]
        return res